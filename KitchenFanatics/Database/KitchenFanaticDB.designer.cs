#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KitchenFanatics.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KitchenFanatic")]
	public partial class KitchenFanaticDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertSaleLine(SaleLine instance);
    partial void UpdateSaleLine(SaleLine instance);
    partial void DeleteSaleLine(SaleLine instance);
    partial void InsertProductCategory(ProductCategory instance);
    partial void UpdateProductCategory(ProductCategory instance);
    partial void DeleteProductCategory(ProductCategory instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertSale(Sale instance);
    partial void UpdateSale(Sale instance);
    partial void DeleteSale(Sale instance);
    #endregion
		
		public KitchenFanaticDBDataContext() : 
				base(global::KitchenFanatics.Properties.Settings.Default.KitchenFanaticConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KitchenFanaticDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KitchenFanaticDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KitchenFanaticDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KitchenFanaticDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<SaleLine> SaleLines
		{
			get
			{
				return this.GetTable<SaleLine>();
			}
		}
		
		public System.Data.Linq.Table<ProductCategory> ProductCategories
		{
			get
			{
				return this.GetTable<ProductCategory>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Sale> Sales
		{
			get
			{
				return this.GetTable<Sale>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _CustomerAddress;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private EntitySet<Sale> _Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCustomerAddressChanging(string value);
    partial void OnCustomerAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Customer()
		{
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddress", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this.OnCustomerAddressChanging(value);
					this.SendPropertyChanging();
					this._CustomerAddress = value;
					this.SendPropertyChanged("CustomerAddress");
					this.OnCustomerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Sales", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SaleLine")]
	public partial class SaleLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SaleLineID;
		
		private System.Nullable<int> _ItemNR;
		
		private int _Amount;
		
		private decimal _Price;
		
		private System.Nullable<int> _SaleID;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Sale> _Sale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaleLineIDChanging(int value);
    partial void OnSaleLineIDChanged();
    partial void OnItemNRChanging(System.Nullable<int> value);
    partial void OnItemNRChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnSaleIDChanging(System.Nullable<int> value);
    partial void OnSaleIDChanged();
    #endregion
		
		public SaleLine()
		{
			this._Product = default(EntityRef<Product>);
			this._Sale = default(EntityRef<Sale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleLineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SaleLineID
		{
			get
			{
				return this._SaleLineID;
			}
			set
			{
				if ((this._SaleLineID != value))
				{
					this.OnSaleLineIDChanging(value);
					this.SendPropertyChanging();
					this._SaleLineID = value;
					this.SendPropertyChanged("SaleLineID");
					this.OnSaleLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNR", DbType="Int")]
		public System.Nullable<int> ItemNR
		{
			get
			{
				return this._ItemNR;
			}
			set
			{
				if ((this._ItemNR != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemNRChanging(value);
					this.SendPropertyChanging();
					this._ItemNR = value;
					this.SendPropertyChanged("ItemNR");
					this.OnItemNRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleID", DbType="Int")]
		public System.Nullable<int> SaleID
		{
			get
			{
				return this._SaleID;
			}
			set
			{
				if ((this._SaleID != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleIDChanging(value);
					this.SendPropertyChanging();
					this._SaleID = value;
					this.SendPropertyChanged("SaleID");
					this.OnSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SaleLine", Storage="_Product", ThisKey="ItemNR", OtherKey="ItemNR", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.SaleLines.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.SaleLines.Add(this);
						this._ItemNR = value.ItemNR;
					}
					else
					{
						this._ItemNR = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_SaleLine", Storage="_Sale", ThisKey="SaleID", OtherKey="SaleID", IsForeignKey=true)]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.SaleLines.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.SaleLines.Add(this);
						this._SaleID = value.SaleID;
					}
					else
					{
						this._SaleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCategory")]
	public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private string _CategoryDecription;
		
		private System.Nullable<int> _UniqueAmount;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryDecriptionChanging(string value);
    partial void OnCategoryDecriptionChanged();
    partial void OnUniqueAmountChanging(System.Nullable<int> value);
    partial void OnUniqueAmountChanged();
    #endregion
		
		public ProductCategory()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDecription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string CategoryDecription
		{
			get
			{
				return this._CategoryDecription;
			}
			set
			{
				if ((this._CategoryDecription != value))
				{
					this.OnCategoryDecriptionChanging(value);
					this.SendPropertyChanging();
					this._CategoryDecription = value;
					this.SendPropertyChanged("CategoryDecription");
					this.OnCategoryDecriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueAmount", DbType="Int")]
		public System.Nullable<int> UniqueAmount
		{
			get
			{
				return this._UniqueAmount;
			}
			set
			{
				if ((this._UniqueAmount != value))
				{
					this.OnUniqueAmountChanging(value);
					this.SendPropertyChanging();
					this._UniqueAmount = value;
					this.SendPropertyChanged("UniqueAmount");
					this.OnUniqueAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_Product", Storage="_Products", ThisKey="CategoryID", OtherKey="ItemCategory")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemNR;
		
		private string _ItemName;
		
		private decimal _ItemPrice;
		
		private int _ItemStock;
		
		private System.Nullable<int> _ItemCategory;
		
		private System.Nullable<decimal> _ItemWidth;
		
		private System.Nullable<decimal> _ItemHeight;
		
		private System.Nullable<decimal> _ItemDepth;
		
		private System.Nullable<decimal> _ItemWeight;
		
		private EntitySet<SaleLine> _SaleLines;
		
		private EntityRef<ProductCategory> _ProductCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemNRChanging(int value);
    partial void OnItemNRChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnItemPriceChanging(decimal value);
    partial void OnItemPriceChanged();
    partial void OnItemStockChanging(int value);
    partial void OnItemStockChanged();
    partial void OnItemCategoryChanging(System.Nullable<int> value);
    partial void OnItemCategoryChanged();
    partial void OnItemWidthChanging(System.Nullable<decimal> value);
    partial void OnItemWidthChanged();
    partial void OnItemHeightChanging(System.Nullable<decimal> value);
    partial void OnItemHeightChanged();
    partial void OnItemDepthChanging(System.Nullable<decimal> value);
    partial void OnItemDepthChanged();
    partial void OnItemWeightChanging(System.Nullable<decimal> value);
    partial void OnItemWeightChanged();
    #endregion
		
		public Product()
		{
			this._SaleLines = new EntitySet<SaleLine>(new Action<SaleLine>(this.attach_SaleLines), new Action<SaleLine>(this.detach_SaleLines));
			this._ProductCategory = default(EntityRef<ProductCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNR", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemNR
		{
			get
			{
				return this._ItemNR;
			}
			set
			{
				if ((this._ItemNR != value))
				{
					this.OnItemNRChanging(value);
					this.SendPropertyChanging();
					this._ItemNR = value;
					this.SendPropertyChanged("ItemNR");
					this.OnItemNRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemPrice", DbType="Decimal(18,0) NOT NULL")]
		public decimal ItemPrice
		{
			get
			{
				return this._ItemPrice;
			}
			set
			{
				if ((this._ItemPrice != value))
				{
					this.OnItemPriceChanging(value);
					this.SendPropertyChanging();
					this._ItemPrice = value;
					this.SendPropertyChanged("ItemPrice");
					this.OnItemPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemStock", DbType="Int NOT NULL")]
		public int ItemStock
		{
			get
			{
				return this._ItemStock;
			}
			set
			{
				if ((this._ItemStock != value))
				{
					this.OnItemStockChanging(value);
					this.SendPropertyChanging();
					this._ItemStock = value;
					this.SendPropertyChanged("ItemStock");
					this.OnItemStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCategory", DbType="Int")]
		public System.Nullable<int> ItemCategory
		{
			get
			{
				return this._ItemCategory;
			}
			set
			{
				if ((this._ItemCategory != value))
				{
					if (this._ProductCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemCategoryChanging(value);
					this.SendPropertyChanging();
					this._ItemCategory = value;
					this.SendPropertyChanged("ItemCategory");
					this.OnItemCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemWidth", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ItemWidth
		{
			get
			{
				return this._ItemWidth;
			}
			set
			{
				if ((this._ItemWidth != value))
				{
					this.OnItemWidthChanging(value);
					this.SendPropertyChanging();
					this._ItemWidth = value;
					this.SendPropertyChanged("ItemWidth");
					this.OnItemWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemHeight", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ItemHeight
		{
			get
			{
				return this._ItemHeight;
			}
			set
			{
				if ((this._ItemHeight != value))
				{
					this.OnItemHeightChanging(value);
					this.SendPropertyChanging();
					this._ItemHeight = value;
					this.SendPropertyChanged("ItemHeight");
					this.OnItemHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDepth", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ItemDepth
		{
			get
			{
				return this._ItemDepth;
			}
			set
			{
				if ((this._ItemDepth != value))
				{
					this.OnItemDepthChanging(value);
					this.SendPropertyChanging();
					this._ItemDepth = value;
					this.SendPropertyChanged("ItemDepth");
					this.OnItemDepthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemWeight", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ItemWeight
		{
			get
			{
				return this._ItemWeight;
			}
			set
			{
				if ((this._ItemWeight != value))
				{
					this.OnItemWeightChanging(value);
					this.SendPropertyChanging();
					this._ItemWeight = value;
					this.SendPropertyChanged("ItemWeight");
					this.OnItemWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SaleLine", Storage="_SaleLines", ThisKey="ItemNR", OtherKey="ItemNR")]
		public EntitySet<SaleLine> SaleLines
		{
			get
			{
				return this._SaleLines;
			}
			set
			{
				this._SaleLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_Product", Storage="_ProductCategory", ThisKey="ItemCategory", OtherKey="CategoryID", IsForeignKey=true)]
		public ProductCategory ProductCategory
		{
			get
			{
				return this._ProductCategory.Entity;
			}
			set
			{
				ProductCategory previousValue = this._ProductCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProductCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductCategory.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductCategory.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ItemCategory = value.CategoryID;
					}
					else
					{
						this._ItemCategory = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SaleLines(SaleLine entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_SaleLines(SaleLine entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sale")]
	public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SaleID;
		
		private System.DateTime _SaleDate;
		
		private decimal _SaleTotal;
		
		private string _DeliveryAddress;
		
		private int _SaleStatus;
		
		private System.Nullable<int> _CustomerID;
		
		private EntitySet<SaleLine> _SaleLines;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaleIDChanging(int value);
    partial void OnSaleIDChanged();
    partial void OnSaleDateChanging(System.DateTime value);
    partial void OnSaleDateChanged();
    partial void OnSaleTotalChanging(decimal value);
    partial void OnSaleTotalChanged();
    partial void OnDeliveryAddressChanging(string value);
    partial void OnDeliveryAddressChanged();
    partial void OnSaleStatusChanging(int value);
    partial void OnSaleStatusChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    #endregion
		
		public Sale()
		{
			this._SaleLines = new EntitySet<SaleLine>(new Action<SaleLine>(this.attach_SaleLines), new Action<SaleLine>(this.detach_SaleLines));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SaleID
		{
			get
			{
				return this._SaleID;
			}
			set
			{
				if ((this._SaleID != value))
				{
					this.OnSaleIDChanging(value);
					this.SendPropertyChanging();
					this._SaleID = value;
					this.SendPropertyChanged("SaleID");
					this.OnSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleDate", DbType="Date NOT NULL")]
		public System.DateTime SaleDate
		{
			get
			{
				return this._SaleDate;
			}
			set
			{
				if ((this._SaleDate != value))
				{
					this.OnSaleDateChanging(value);
					this.SendPropertyChanging();
					this._SaleDate = value;
					this.SendPropertyChanged("SaleDate");
					this.OnSaleDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleTotal", DbType="Decimal(18,0) NOT NULL")]
		public decimal SaleTotal
		{
			get
			{
				return this._SaleTotal;
			}
			set
			{
				if ((this._SaleTotal != value))
				{
					this.OnSaleTotalChanging(value);
					this.SendPropertyChanging();
					this._SaleTotal = value;
					this.SendPropertyChanged("SaleTotal");
					this.OnSaleTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryAddress", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string DeliveryAddress
		{
			get
			{
				return this._DeliveryAddress;
			}
			set
			{
				if ((this._DeliveryAddress != value))
				{
					this.OnDeliveryAddressChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAddress = value;
					this.SendPropertyChanged("DeliveryAddress");
					this.OnDeliveryAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleStatus", DbType="Int NOT NULL")]
		public int SaleStatus
		{
			get
			{
				return this._SaleStatus;
			}
			set
			{
				if ((this._SaleStatus != value))
				{
					this.OnSaleStatusChanging(value);
					this.SendPropertyChanging();
					this._SaleStatus = value;
					this.SendPropertyChanged("SaleStatus");
					this.OnSaleStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_SaleLine", Storage="_SaleLines", ThisKey="SaleID", OtherKey="SaleID")]
		public EntitySet<SaleLine> SaleLines
		{
			get
			{
				return this._SaleLines;
			}
			set
			{
				this._SaleLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SaleLines(SaleLine entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_SaleLines(SaleLine entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
	}
}
#pragma warning restore 1591
